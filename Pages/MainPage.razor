@page "/main"
@using System.Text.Json
@using myBlazorApp.Models
@layout LogoHeader
@inject IJSRuntime JSRuntime
@inject SupabaseInterop Supabase
@inject NavigationManager Navigation

<div class="icon-container">
    <span class="material-symbols-outlined main-icon" @onclick="() => OpenPopup(PopupType.CreatePost)">add</span>
    <span class="material-symbols-outlined main-icon" @onclick="() => OpenPopup(PopupType.Menu)">menu</span>
</div>

@if (activePopup != PopupType.Main)
{
    <div class="popup-overlay">
        <div class="popup-container" @onclick:stopPropagation="true" @onscroll:stopPropagation="true">
            @if (activePopup == PopupType.CreatePost)
            {
                <CreatePost ClosePopup="ClosePopup"/>
            }
            else if (activePopup == PopupType.Menu)
            {
                <MenuPopup ClosePopup="ClosePopup" OpenPopup="OpenPopup" activePopup="@activePopup"/>
            }
            else if (activePopup == PopupType.PostDetails)
            {
                <PostDetails SelectedPost="@SelectedPost" ClosePopup="ClosePopup" />
            }
            else if (activePopup == PopupType.SearchPosts)
            {
                <SearchPosts returnToMenu="returnToMenu" OpenPopup="OpenPopup" activePopup="@activePopup"/>
            }
            else if (activePopup == PopupType.SearchResults)
            {
                Navigation.NavigateTo("/search");
                
            }
            else if (activePopup == PopupType.Notifications)
            {
                <Notifications returnToMenu="returnToMenu"/>
            }
            else if (activePopup == PopupType.HelpSupport)
            {
                <HelpSupport returnToMenu="returnToMenu"/>
            }
            else if (activePopup == PopupType.TermsConditions)
            {
                <TermsConditions returnToMenu="returnToMenu"/>
            }
            else if (activePopup == PopupType.About)
            {
                <About returnToMenu="returnToMenu"/>
            }
            
        </div>
    </div>
}
else{
    activePopup = PopupType.Main;
}

<div class="post-container">
    @if (posts != null && posts.Any())
    {
        @for (int i = 0; i < posts.Count; i++)
        {
            var post = posts[i];
            <div class="post-box">
                <div class="name-date">
                    <h3 class="author">@post.Author</h3>
                    <p class="timestamp">@post.Timestamp.ToString("dd/MM HH:mm")</p>
                </div>
                <p class="content">@post.Content</p>
                <p class="see-more" @onclick="() => OpenPost(post)">see more.</p>
            </div>
        }
    }
    else
    {
        <p class="loading">Loading posts...</p>
    }
</div>

@code {
    private int postCount = 10; // Default to 10 posts for mobile
    private List<Post> posts;

     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Get screen width to determine post count
                int screenWidth = await JSRuntime.InvokeAsync<int>("getScreenWidth");
                Console.WriteLine($"screen width is: {screenWidth}");

                postCount = screenWidth >= 1024 ? 12 : 10;

                // Fetch posts from Supabase
                int offset = 0; // Start from the first post (adjust this if implementing pagination)
                var jsonString = await Supabase.GetTableData("posts", postCount, offset);

                // Deserialize the JSON response into the posts list
                posts = JsonSerializer.Deserialize<List<Post>>(jsonString);
                @* posts.Reverse(); *@
                // Trigger re-render once posts are loaded
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching posts: {ex.Message}");
            }
        }
    }
    private Post SelectedPost { get; set; }

    private PopupType activePopup = PopupType.Main;

    private void OpenPopup(PopupType type)
    {
        activePopup = type;
        Console.WriteLine($"Page: {activePopup}");
        StateHasChanged();
    }

    private void OpenPost(Post mypost)
    {
        activePopup = PopupType.PostDetails;
        SelectedPost = mypost;
    }

    private void returnToMenu()
    {
        activePopup = PopupType.Menu;
    }

    private void ClosePopup()
    {
        activePopup = PopupType.Main;
    }

    
}
