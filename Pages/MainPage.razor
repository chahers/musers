@page "/main"
@using System.Text.Json
@using myBlazorApp.Models
@layout LogoHeader
@inject IJSRuntime JSRuntime
@inject SupabaseInterop Supabase
@inject NavigationManager Navigation

<div class="icon-container">
    <span class="material-symbols-outlined main-icon" @onclick="() => OpenPopup(PopupType.CreatePost)">add</span>
    <span class="material-symbols-outlined main-icon" @onclick="() => OpenPopup(PopupType.Menu)">menu</span>
</div>

@if (activePopup != PopupType.Main)
{
    JSRuntime.InvokeVoidAsync("disableScroll");
    <div class="popup-overlay">
        <div class="popup-container">
            @if (activePopup == PopupType.CreatePost)
            {
                <CreatePost ClosePopup="ClosePopup" OpenPopup="OpenPopup"/>
            }
            else if (activePopup == PopupType.PendingPage)
            {
                <PendingPage ClosePopup="ClosePopup"/>
                @* Navigation.NavigateTo("/pending"); *@
            }
            else if (activePopup == PopupType.Menu)
            {
                <MenuPopup ClosePopup="ClosePopup" OpenPopup="OpenPopup"/>
            }
            else if (activePopup == PopupType.PostDetails)
            {
                <PostDetails SelectedPost="@SelectedPost" ClosePopup="ClosePopup" OpenPopup="OpenPopup" />
            }
            else if (activePopup == PopupType.SearchPosts)
            {
                <SearchPosts returnToMenu="returnToMenu" OpenPopup="OpenPopup" />
            }
            else if (activePopup == PopupType.SearchResults)
            {
                <SearchResults returnToMenu="returnToMenu" OpenPost="OpenPost" OpenPopup="OpenPopup"/>
            }
            else if (activePopup == PopupType.Notifications)
            {
                <Notifications returnToMenu="returnToMenu"/>
            }
            else if (activePopup == PopupType.HelpSupport)
            {
                <HelpSupport returnToMenu="returnToMenu" OpenPopup="OpenPopup"/>
            }
            else if (activePopup == PopupType.AppGuide)
            {
                <AppGuide ClosePopup="ClosePopup"/>
            }
            else if (activePopup == PopupType.ContactUs)
            {
                <ContactUs ClosePopup="ClosePopup"/>
            }
            else if (activePopup == PopupType.TermsConditions)
            {
                <TermsConditions returnToMenu="returnToMenu"/>
            }
            else if (activePopup == PopupType.About)
            {
                <About returnToMenu="returnToMenu"/>
            }
            
        </div>
    </div>
}

else{
    activePopup = PopupType.Main;
    JSRuntime.InvokeVoidAsync("enableScroll");
}

<div class="post-container" @ref="scrollContainer" @onscroll="OnScroll">
    @if (posts != null && posts.Any())
    {
        @for (int i = 0; i < posts.Count; i++)
        {
            var post = posts[i];
            <div class="post-box">
                <div class="name-date">
                    <h3 class="author">@post.Author</h3>
                    <p class="timestamp">@post.Timestamp.ToString("dd/MM HH:mm")</p>
                </div>
                <p class="content">@post.Content</p>
                <p class="see-more" @onclick="() => OpenPost(post)">see more.</p>
            </div>
        }
    }
    @if (isLoading)
    {
        <div class="loading">Loading more posts...</div>
    }
</div>

@code {
    private int postCount = 10; // Default to 10 posts for mobile
    private List<Post> posts = new();
    private bool isLoading = false;
    private bool hasMorePosts = true;
    private int currentPage = 1;
    private readonly int pageSize = 8;
    private ElementReference scrollContainer;
    private IJSObjectReference? module;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                OpenPopup(PopupType.AppGuide);
                module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./js/custom.js");
                await LoadMorePosts();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"JS Module Load Error: {ex.Message}");
            }
        }
    }


    private async Task LoadMorePosts()
    {
        if (isLoading || !hasMorePosts) return;

        isLoading = true;

        try
        {
            // Fetch posts from Supabase
            int offset = (currentPage - 1) * pageSize; // Adjust offset for pagination
            var jsonString = await Supabase.GetTableData("posts", pageSize, offset);

            // Deserialize the JSON response into the posts list
            var newPosts = JsonSerializer.Deserialize<List<Post>>(jsonString);

            if (newPosts?.Count < pageSize)
            {
                hasMorePosts = false;
            }

            posts?.AddRange(newPosts);
            currentPage++;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching posts: {ex.Message}");
        }

        isLoading = false;
        StateHasChanged();
    }

    [JSInvokable]
    private async Task OnScroll()
    {
        // Get the scroll position and height of the container
        try
        {
            var scrollHeight = await JSRuntime.InvokeAsync<int>("blazorHelpers.getScrollHeight", scrollContainer);
            var scrollTop = await JSRuntime.InvokeAsync<int>("blazorHelpers.getScrollTop", scrollContainer);
            var clientHeight = await JSRuntime.InvokeAsync<int>("blazorHelpers.getClientHeight", scrollContainer);
            // Check if user is near the bottom (100px away)
            if (scrollHeight - scrollTop - clientHeight < 100 && !isLoading && hasMorePosts)
            {
                await LoadMorePosts();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting window size: {ex.Message}");
        }
        
    }
    private Post SelectedPost { get; set; }

    private PopupType activePopup = PopupType.Main;

    private void OpenPopup(PopupType type)
    {
        activePopup = type;
        Console.WriteLine($"Page: {activePopup}");
        StateHasChanged();
    }

    private void OpenPost(Post mypost)
    {
        activePopup = PopupType.PostDetails;
        SelectedPost = mypost;
    }

    private void returnToMenu()
    {
        activePopup = PopupType.Menu;
    }

    private void ClosePopup()
    {
        activePopup = PopupType.Main;
        Navigation.NavigateTo("/main");
    }

    
}
