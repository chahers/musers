@page "/main"
@using System.Text.Json
@layout LogoHeader
@inject IJSRuntime JSRuntime
@inject SupabaseInterop Supabase

<link href="MainPage.razor.css" rel="stylesheet" />
<div class="icon-container">
    <span class="material-symbols-outlined main-icon" @onclick="() => OpenPopup(PopupType.CreatePost)">add</span>
    <span class="material-symbols-outlined main-icon" @onclick="() => OpenPopup(PopupType.Menu)">menu</span>
</div>

@if (activePopup != null)
{
    <div class="popup-overlay">
        <div class="popup-container" @onclick:stopPropagation="true" @onscroll:stopPropagation="true">
            @if (activePopup == PopupType.CreatePost)
            {
                <div class="material-symbols-outlined close-button" @onclick="ClosePopup">close</div>
                <div class="create-container">
                    <div class="name-date">
                        <input class="author-input "type="text" placeholder="name." @bind="NameInput"/>
                        <p></p>
                    </div>
                    <textarea class="content-input"_framework placeholder="Write something..." @bind="ContentInput"></textarea>

                    <p class="submit" @onclick="SubmitPost">submit.</p>
                </div>
            }
            else if (activePopup == PopupType.Menu)
            {
                <div class="material-symbols-outlined close-button" @onclick="ClosePopup">close</div>
                <div class="menu-container">
                    <h3 class="menu-items">search posts.</h3>
                    <h3 class="menu-items">help & support.</h3>
                    <h3 class="menu-items">terms & conditions.</h3>
                    <h3 class="menu-items">about.</h3>
                </div>
            }
            
        </div>
    </div>
}

<div class="post-container">
    @if (posts != null && posts.Any())
    {
        @for (int i = 0; i < posts.Count; i++)
        {
            var post = posts[i];
            <div class="post-box">
                <div class="name-date">
                    <h3 class="author">@post.Author</h3>
                    <p class="timestamp">@post.Timestamp.ToString("dd/MM HH:mm")</p>
                </div>
                <p class="content">@post.Content</p>
                <p class="see-more">see more.</p>
            </div>
        }
    }
    else
    {
        <p class="loading">Loading posts...</p>
    }
</div>

@code {
    private int postCount = 10; // Default to 10 posts for mobile
    private List<Post> posts;

     protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            try
            {
                // Get screen width to determine post count
                int screenWidth = await JSRuntime.InvokeAsync<int>("getScreenWidth");
                Console.WriteLine($"screen width is: {screenWidth}");

                postCount = screenWidth >= 1024 ? 30 : 10;

                // Fetch posts from Supabase
                int offset = 0; // Start from the first post (adjust this if implementing pagination)
                var jsonString = await Supabase.GetTableData("posts", postCount, offset);

                // Deserialize the JSON response into the posts list
                posts = JsonSerializer.Deserialize<List<Post>>(jsonString);
                @* posts.Reverse(); *@
                // Trigger re-render once posts are loaded
                StateHasChanged();
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching posts: {ex.Message}");
            }
        }
    }

    public class Post
    {
        public int Id { get; set; }
        public string Author { get; set; }
        public string Content { get; set; }
        public DateTime Timestamp { get; set; }
    }

    private enum PopupType
    {
        Menu,
        CreatePost,
        SearchPosts,
        HelpSupport,
        TermsConditions,
        About
    }

    private PopupType? activePopup = null;

    private void OpenPopup(PopupType type)
    {
        activePopup = type;
    }

    private void ClosePopup()
    {
        activePopup = null;
    }

    private string NameInput { get; set; } = "";
    private string ContentInput { get; set; } = "";

    private async Task SubmitPost()
    {
        if (string.IsNullOrWhiteSpace(NameInput) || string.IsNullOrWhiteSpace(ContentInput))
        {
            Console.WriteLine("Name and Content cannot be empty.");
            return;
        }

        var post = new
        {
            author = NameInput,
            content = ContentInput,
            state = "approved",
            timestamp = DateTime.Now
        };

        // Call JavaScript function to insert data
        await JSRuntime.InvokeVoidAsync("insertData", "posts", post);

        // Clear input fields after submission
        NameInput = "";
        ContentInput = "";
    }
    
}
