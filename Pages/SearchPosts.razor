@using myBlazorApp.Models
@inject SessionService Session
@inject IJSRuntime JSRuntime
@using System.Text.Json

<div class="close-container">
    <div class="material-symbols-outlined close-button" @onclick="returnToMenu">close</div>
</div>
<div class="menu-container">
    <span class="search-post">search posts.</span>
    <input class="searchbar" type="text" @bind="SearchInput" @bind:event="oninput" placeholder="type here."/>
    <span class="submit search" @onclick="setSearchQuery">submit.</span>

    @if (InputError && SearchInput == "")
    {
        <span class="char-count">please write an input.</span>
    }
</div>

@code {
    [Parameter] public EventCallback returnToMenu { get; set; }
    [Parameter] public Action<PopupType>? OpenPopup { get; set; }
    private string SearchInput { get; set; } = "";
    private bool InputError = false;
    private async Task setSearchQuery()
    {
        if (!string.IsNullOrWhiteSpace(SearchInput)){
            Session.SearchQuery = SearchInput;
            await Search();
            OpenPopup?.Invoke(PopupType.SearchResults);
        }
        else
        {
            InputError = true;
            return;
        }
    }

    private List<Post> Posts = new();
    private async Task Search()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(@Session.SearchQuery))
                return;

            InputError = false;
            var jsonData = await JSRuntime.InvokeAsync<string>("searchPosts", "posts", @Session.SearchQuery, 10, 0);
            if (!string.IsNullOrEmpty(jsonData))
            {
                Posts = JsonSerializer.Deserialize<List<Post>>(jsonData, new JsonSerializerOptions { PropertyNameCaseInsensitive = true }) ?? new();
                Session.SearchedPosts = Posts;
                Console.WriteLine(Session.SearchedPosts);
            }

        }
        catch (Exception e)
        {
            Console.WriteLine($"Error searching posts: {e.Message}");
        }
    }
}